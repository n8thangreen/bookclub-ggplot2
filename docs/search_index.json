[["first-steps.html", "Chapter 1 First steps", " Chapter 1 First steps Learning objectives: the foundations of ggplot useful “recipes” Fuel economy data use "],["mapping-components.html", "Mapping components", " Mapping components Layer Scale Coord Facet Theme "],["other-r-graphics.html", "Other R graphics", " Other R graphics Base R grid lattice htmlwidgets plotly "],["fuel-economy-data.html", "Fuel economy data", " Fuel economy data 1.0.1 Exercises library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union library(ggplot2) List five functions that you could use to get more information about the mpg dataset. summary, table, mean, sd, var, quantile, max, min, range, ncol, is.na How can you find out what other datasets are included with ggplot2? data(package = \"ggplot2\") Apart from the US, most countries use fuel consumption (fuel consumed over fixed distance) rather than fuel economy (distance travelled with fixed amount of fuel). How could you convert cty and hwy into the European standard of l/100km? mpg %&gt;% mutate(cgp100km = 2.35/cty*100, hgp100km = 235 / hwy) Which manufacturer has the most models in this dataset? mpg %&gt;% count(manufacturer) %&gt;% arrange(desc(n)) ## # A tibble: 15 × 2 ## manufacturer n ## &lt;chr&gt; &lt;int&gt; ## 1 dodge 37 ## 2 toyota 34 ## 3 volkswagen 27 ## 4 ford 25 ## 5 chevrolet 19 ## 6 audi 18 ## 7 hyundai 14 ## 8 subaru 14 ## 9 nissan 13 ## 10 honda 9 ## 11 jeep 8 ## 12 pontiac 5 ## 13 land rover 4 ## 14 mercury 4 ## 15 lincoln 3 mpg |&gt; group_by(manufacturer) |&gt; summarise(n = n()) |&gt; filter(n == max(n)) ## # A tibble: 1 × 2 ## manufacturer n ## &lt;chr&gt; &lt;int&gt; ## 1 dodge 37 tapply(mpg$manufacturer, INDEX = mpg$manufacturer, FUN = length) |&gt; # which.max() sort() |&gt; tail(1) ## dodge ## 37 Which model has the most variations? mpg %&gt;% count(model) %&gt;% arrange(desc(n)) ## # A tibble: 38 × 2 ## model n ## &lt;chr&gt; &lt;int&gt; ## 1 caravan 2wd 11 ## 2 ram 1500 pickup 4wd 10 ## 3 civic 9 ## 4 dakota pickup 4wd 9 ## 5 jetta 9 ## 6 mustang 9 ## 7 a4 quattro 8 ## 8 grand cherokee 4wd 8 ## 9 impreza awd 8 ## 10 a4 7 ## # ℹ 28 more rows Does your answer change if you remove the redundant specification of drive train (e.g. “pathfinder 4wd”, “a4 quattro”) from the model name? mpg %&gt;% mutate(model = sub(&quot; 4wd&quot;, &quot;&quot;, model), model = sub(&quot; awd&quot;, &quot;&quot;, model), model = sub(&quot; 2wd&quot;, &quot;&quot;, model), model = sub(&quot; quattro&quot;, &quot;&quot;, model) ) %&gt;% count(model) %&gt;% arrange(desc(n)) ## # A tibble: 37 × 2 ## model n ## &lt;chr&gt; &lt;int&gt; ## 1 a4 15 ## 2 caravan 11 ## 3 ram 1500 pickup 10 ## 4 civic 9 ## 5 dakota pickup 9 ## 6 jetta 9 ## 7 mustang 9 ## 8 grand cherokee 8 ## 9 impreza 8 ## 10 camry 7 ## # ℹ 27 more rows "],["key-components.html", "Key components", " Key components three key components of a ggplot2 plot data aesthetics geom e.g. ggplot(mpg, aes(x = displ, y = hwy)) + geom_point() ggplot() + geom_point(mpg, aes(x = displ, y = hwy)) ggplot() + geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) ggplot() + geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) ggplot(midwest) + geom_point(data = mpg, aes(x = displ, y = hwy)) "],["exercises-1.html", "Exercises", " Exercises ggplot(mpg, aes(x = cty, y = hwy)) + geom_point() directly correlated issues discrete measurements overplotting scale ggplot(mpg, aes(model, manufacturer)) + geom_point() This plot maps model (specific car models) to the x-axis and manufacturer to the y-axis. Each point represents one observation in the dataset. usefulness both variables are categorical no natural order cluttered informative aggregate reorder facet ggplot(mpg, aes(cty, hwy)) + geom_point() ggplot(diamonds, aes(carat, price)) + geom_point() ggplot(economics, aes(date, unemploy)) + geom_line() ggplot(mpg, aes(cty)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. "],["colour-size-shape-and-other-aesthetic-attributes.html", "Colour, size, shape and other aesthetic attributes", " Colour, size, shape and other aesthetic attributes ggplot2 takes care of the details of converting data (e.g., ‘f’, ‘r’, ‘4’) into aesthetics (e.g., ‘red’, ‘yellow’, ‘green’) with a scale. ggplot(mpg, aes(displ, hwy, colour = class)) + geom_point() no ‘scaling’ ggplot(mpg, aes(displ, hwy)) + geom_point(aes(colour = &quot;blue&quot;)) ggplot(mpg, aes(displ, hwy)) + geom_point(colour = &quot;blue&quot;) the second plots doesn’t have a legend think about how to colour tell a story less is more! "],["exercises-2.html", "Exercises", " Exercises map to continuous values gradient scale ggplot(mpg, aes(cty, hwy, colour = displ)) + geom_point() categorical variable unique colour ggplot(mpg, aes(cty, hwy, colour = class)) + geom_point() more than one aesthetic ggplot(mpg, aes(cty, hwy, colour = class, size = displ)) + geom_point() throw error shapes discrete ggplot(mpg, aes(cty, hwy, shape = displ)) + geom_point() ggplot(mpg, aes(cty, hwy, shape = trans)) + geom_point() ## Warning: The shape palette can deal with a maximum of 6 discrete values because more ## than 6 becomes difficult to discriminate ## ℹ you have requested 10 values. Consider specifying shapes manually if you need ## that many have them. ## Warning: Removed 96 rows containing missing values or values outside the scale range ## (`geom_point()`). 6 shapes used but need 10 "],["facets.html", "Facets", " Facets Facets are a way of splitting a plot into multiple panels based on the values of a variable. grid and wrapped when to use this vs aesthetics? ggplot(mpg, aes(displ, hwy)) + geom_point() + facet_wrap(~class) Exercises divides in to bins ggplot(mpg, aes(displ, cty)) + geom_point() + facet_wrap(~ hwy) ggplot(mpg, aes(displ, cty)) + geom_point() + facet_wrap(~ cyl) ggplot(mpg, aes(displ, cty)) + geom_point() + facet_wrap(~ cyl) no. cyclinders increase -&gt; bigger engines, more fuel consumption ggplot(mpg, aes(displ, cty)) + geom_point() + facet_wrap(~ class, nrow = 2, ncol = 4) ggplot(mpg, aes(displ, cty)) + geom_point() + facet_wrap(~ class, nrow = 2) The scales argument controls whether the axes in the facets are fixed or allowed to vary independently. Options: fixed (default): All facets share the same x and y-axis scales. free_x: Each facet has its own x-axis scale. free_y: Each facet has its own y-axis scale. free: Each facet has its own x and y-axis scales. use when scale are different/the same ggplot(mpg, aes(displ, cty)) + geom_point() + facet_wrap(~ class, scales = &quot;free&quot;) "],["meeting-videos.html", "Meeting Videos", " Meeting Videos Cohort 1 Meeting chat log LOG "]]
